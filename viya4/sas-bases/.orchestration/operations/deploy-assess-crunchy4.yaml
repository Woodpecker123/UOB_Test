apiVersion: orchestration.sas.com/v3beta6
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-crunchy5-postgres-operator
    sas.com/component-version: 1.0.27-20221130.1669844919471
  creationTimestamp: null
  labels:
    participate.lifecycle.sas.com/deploy-assess: "true"
  name: deploy-assess-crunchy4
spec:
  args:
  - name: namespace
    required: true
  source: |-
    package main
    import (
      "fmt"
      "strings"
      "sas/orchestration/lifecycle"
      c "sas/orchestration/lifecycle/cluster"
    )
    func main() {
      namespace := lifecycle.Arg("namespace")
      checkCrunchy4(namespace)
      checkOpenShift()
      blockOpenShiftUpgrade()
    }
    func checkCrunchy4(namespace string) {
      opDeployments, err := c.Resources(c.Namespace(namespace), c.Version("v1"), c.Resource("Deployment"), c.Name("sas-crunchy-data-postgres-operator"))
      if err != nil {
        panic(fmt.Sprintf("Failed to get deployments: %v", err))
      }
      if len(opDeployments) > 0 {
        lifecycle.Log("Detected existing deployment as running Crunchy 4")
        lifecycle.SetVariable("dataserver.sas.com/crunchy-v4", "true")
      }
    }
    func checkOpenShift() {
      out, err := lifecycle.Kubectl("api-versions")
      if err != nil {
        panic(fmt.Sprintf("Failed to get api-versions: %v", err))
      }
      if strings.Contains(out, "config.openshift.io") {
        lifecycle.Log("Detected deployment as running on OpenShift")
        lifecycle.SetVariable("dataserver.sas.com/is-openshift", "true")
      }
    }
    func blockOpenShiftUpgrade() {
      isCrunchy4I := lifecycle.GetVariable("dataserver.sas.com/crunchy-v4")
      isCrunchy4, ok := isCrunchy4I.(string)
      if !ok {
        return
      }
      isOpenShiftI := lifecycle.GetVariable("dataserver.sas.com/is-openshift")
      isOpenShift, ok := isOpenShiftI.(string)
      if !ok {
        return
      }
      if isCrunchy4 == isOpenShift {
        lifecycle.Fail("Upgrading from Crunchy 4 to Crunchy 5 is not currently supported in OpenShift environments")
      }
    }
